<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Purpose of my Blog</title>
    <url>/2020/11/08/Purpose-of-my-Blog/</url>
    <content><![CDATA[<p>MXW01的简单自我介绍，Blog的目的、目标与计划更新内容。</p>
<a id="more"></a>

<h1 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h1><p>目前帝都在读研究生，学过一点机械，一点控制，一点计算机，拧过螺丝，敲过代码。总体而言，属于底层的技术工。现在以计算机为主。</p>
<p>打工人 打工魂….</p>
<p>开了很多Blog，慢慢填，作为笔记本，针不戳！</p>
<h1 id="Blog的目的"><a href="#Blog的目的" class="headerlink" title="Blog的目的"></a>Blog的目的</h1><p>学习笔记</p>
<h1 id="Blog的目标"><a href="#Blog的目标" class="headerlink" title="Blog的目标"></a>Blog的目标</h1><p>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;</p>
<h1 id="学习的计划"><a href="#学习的计划" class="headerlink" title="学习的计划"></a>学习的计划</h1><p>&emsp;<br>&emsp;<br>&emsp;<br>&emsp;</p>
]]></content>
      <tags>
        <tag>唯一</tag>
      </tags>
  </entry>
  <entry>
    <title>C++复习</title>
    <url>/2020/11/15/Cpp-%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<p>正在复习</p>
<a id="more"></a>

<p>视频从上到下看到第97</p>
<p>1.short(2) int(4) long(4) long long(8)</p>
<p>2.sizeof( 数据类型 / 变量 )</p>
<p>3.float(4) 7位有效数字 float型数据需要加f/ double(8) 15-16位有效数字    c++默认小数<strong>输出</strong>6位有效数字</p>
<p>4.字符型变量对应ASCII码值 a-97 A-65</p>
<p>5.转义字符 \n 换行   \斜杠   \t 水平制表（多行对齐，整齐的输出字符）</p>
<p>6.string 变量名 = “字符串值” (#include <string>)  C风格字符串char str[] = “hello world”;</p>
<p>7.布尔数据类型bool true false 1个字节大小</p>
<p>8.只有整型变量才可以进行取模运算 %   取余数</p>
<p>9.++和–前置变量先变，然后表达式运算，后置先表达式再变量</p>
<p>10.三目运算符  c = a &gt; b ? a : b   a&gt;b返回a,即c = a；</p>
<p>11.if和switch区别  switch缺点判断时候只能是整型或者字符型，不可以是区间，switch 优点，结构清晰，执行效率高。</p>
<p>12.随机数种子 ，利用当前系统时间生成随机数。srand((unsigned int)time(NULL)); #include <ctime>  int random = rand() %61 + 40 //40~100取值</p>
<p>13.(int)&amp;arr[1]  取地址+转为整型 arr为地址 arr[1]为元素，相同的二维数组 arr[1]为第二行首地址，arr[1][0]为第二行第一个元素，取地址符&amp;</p>
<p>14.冒泡排序<br>排序总轮数 = 元素个数 - 1<br>每轮对比次数 = 元素个数 - 排序轮数 - 1；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   for (int i &#x3D; 0; i &lt; 9 - 1; i++)</span><br><span class="line">&#123;</span><br><span class="line">	for (int j &#x3D; 0; j &lt; 9 - i - 1; j++)</span><br><span class="line">	&#123;</span><br><span class="line">		if (arr[j] &gt; arr[j + 1])</span><br><span class="line">		&#123;</span><br><span class="line">		int temp &#x3D; arr[j];</span><br><span class="line">		arr[j] &#x3D; arr[j+1];</span><br><span class="line">		arr[j+1] &#x3D; temp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>15.二维数组：数据类型 数组名[行数][列数]  先横排后竖排</p>
<p>16，解引用符号为* 找 指针指向方向的内存，指针定义 int * p = &amp; a； 数组名称就是地址 int * p =  arr;</p>
<p>17.x86系统下 指针长度为 4，sizeof（int *）=4；同理，x64下指针地址长度为8</p>
<p>18.int *p = NULL; 空指针不可访问；int * p = （int *）0x1100; 野指针，尽量避免出现野指针//野指针和空指针都不是申请的空间，不要访问</p>
<p>19.const修饰指针，常量指针 const int * p = &amp; a；指针指向可以修改，值不可以修改。    int * const p = &amp; a ;指针常量 指针指向不可以改，指针指向的值可以改。 const int * const p = &amp; a;都不可以修改；是指针就是常量指针，是常量就算指针常量</p>
<p>20.取数组长度 int len = sizeof(arr) / sizeof(arr[0]);</p>
<p>20.地址传递：函数中处理的也是值，*p解引用后处理，改变实参，值传递不改变实参</p>
<p>21.自定义数据类型：struct 结构体名 {结构体列表}；通过.访问元素//struct关键字可以省略</p>
<p>22.string类型在输出输出时，需要包含头文件 #include<string></p>
<p>23.结构体指针访问结构体属性，需要使用-&gt;符号</p>
<p>24.结构体可以嵌套结构体 teacher.student.score = 100;</p>
<p>25.结构体中 值传递，student.score访问参数，不会修改实参；地址传递 student-&gt;score访问参数，会修改实参。形参改为指针可以减少内存空间，不会复制新的副本出来</p>
<p>26.结构体中的const， void student（const student *s）;其中const可以保证指针不改变常量，保证实参不变，防止误操作。</p>
<p>27.内存分区：代码区，全局区（全局变量，静态变量，常量），栈区（局部变量，函数参数值），堆区（new创建的地址，程序员释放，程序结束时操作系统回收）<br><strong>堆和栈的区别</strong>：<br>使用栈就象我们去饭馆里吃饭，只管点菜（发出申请）、付钱、和吃（使用），吃饱了就走，不必理会切菜、洗菜等准备工作和洗碗、刷锅等扫尾工作，他的好处是快捷，但是自由度小。使用堆就象是自己动手做喜欢吃的菜肴，比较麻烦，但是比较符合自己的口味，而且自由度大。(经典！)</p>
<p>28.new释放数组需要加中括号 delete[] arr;</p>
<p>29.引用 数据类型 &amp; 别名 = 原名； 给变量起别名，引用必须初始化，之后无法修改。 引用本质在c++内部实现是一个指针常量 int* const 指针指向不可修改，值可以修改</p>
<p>30.引用传递，形参会修饰实参，发生改变，原因 引用是在起别名。优点 简化指针修改实参，效果同按地址传递一样</p>
<p>31.int&amp; test(){return a;}; test() = 1000; 引用的函数调用可以作为左值。 不要返回局部变量引用。</p>
<p>32.常量引用（防止误操作）  cost int &amp; ref = 10；等价于  int temp = 10； const  int &amp; ref = temp；</p>
<p>33.函数的形参，可以有默认参数。从第一个开始从左向右都得有。函数声明和实现，不能都有默认参数，不然出现二义性，报错。</p>
<p>34.函数占位参数，void func（int a,int）{；}  占位参数也可以有默认参数</p>
<p>35.函数重载  函数名可以相同，提高函数复用性<br>满足条件：</p>
<blockquote>
<p>1 在同一个作用域之下<br>2 函数名相同<br>3 函数参数(形参)<strong>类型不同</strong>，或者<strong>个数不同</strong> 或者<strong>顺序不同</strong><br>4 返回类型不可以作为函数重载的条件！</p>
</blockquote>
<p>注意事项：</p>
<blockquote>
<p>1、引用作为重载条件，（引用要放在一个合法内存空间，10是放在常量区，要用const int &amp;a 引用）<br>2、当函数重载遇到默认参数，出现二义性，报错</p>
</blockquote>
<p>36.C++面对对象的三大特性：封装、继承、多态。 对象有属性和行为。具有相同性质的对象，抽象为类，比如 人类 ，车类</p>
<p>37.封装  class 类名{属性 + 行为} 通过类创建对象（实例化），对象用<code>.</code>来访问成员。</p>
<p>38.属性和行为共称成员，属性也叫 成员属性，成员<strong>变量</strong>，行为又叫成员<strong>函数</strong>，成员方法</p>
<p>39.类的访问权限</p>
<blockquote>
<p>public 公共权限  成员类内类外都可以访问<br>protected 保护权限 类内可以访问，类外不可以访问。儿子也可以访问父亲中的保护内容<br>private 私有权限 类内可以访问，类外不可以访问  儿子不可以访问父亲的私有内容</p>
</blockquote>
<p>40.struct和class唯一区别在于 默认访问权限不同，struct默认权限为公共，class默认权限为私有。</p>
<p>41.成员属性设为私有，可以自己控制读写权限，private的内容在public里读写，具体读写代码自己编写从而控制读写权限，可以检测数据有效性，在public中写的接口可以判断传入的数据是否合理。</p>
<p>42.在类中可以让另一个类作为成员。.h和.cpp头文件和源文件中需要include。</p>
<p>43.构造函数和析构函数的函数名和类名一样。构造函数为初始化，析构函数为清理。构造和析构都是必须实现的，如果不提供，编译器会提供一个空实现。<br>构造函数：</p>
<ul>
<li>没有返回值 不用写void</li>
<li>函数名与类名相同</li>
<li>构造函数可以有参数，可以发生重载</li>
<li>创建对象的时候，构造函数会<strong>自动调用</strong>，而且只调用一次<br>析构函数：</li>
<li>没有返回值 不用写void</li>
<li>函数名与类名相同 在名称前加~</li>
<li>析构函数不可以有参数，不可以发生重载</li>
<li>对象在销毁前，会自动调用析构函数，而且只会调用一次。</li>
</ul>
<p>44.c++中开方，使用<code>pow(，0.5)</code>平方：<code>pow(，2)</code>,需要#include&lt;math.h&gt;</p>
<p>45.构造函数<br>两种分类方式：按参数分：有参构造和无参构造。按类型分：普通构造和拷贝构造<br>三种调用方式：括号法，显示法，隐式转换法</p>
<p>46.拷贝构造函数，不能改变原函数，需要加const，还要按照引用方式构造。将传入人身上的所有属性拷贝到我身上。 写法：person(const person &amp; p){}<br>调用默认构造函数时候，不要加（）。加括号后编译器认为这是函数的声明<br>调用：常用括号法<br>默认构造： 括号法：Person p1;     显示法： Person p1;<br>有参构造： 括号法：Person p2(10); 显示法： Person p2 = person(10); 隐式法：Person p4 = 10;<br>拷贝构造:  括号法：Person p3(p2); 显示法： Person p3 = person(p2); 隐式法：Person p5 = p4;<br>Person(10);单独写为匿名对象，当前行结束之后，马上析构。</p>
<p>47.拷贝构造函数的调用时机</p>
<ul>
<li>使用一个已经创建完毕的对象来初始化一个新对象。 复制，克隆Person p3(p2);</li>
<li>值传递的方式给函数参数传值。</li>
<li>以值方式返回局部对象。</li>
</ul>
<p>48.构造函数调用规则<br>创建一个类，c++编译器给每个类添加3个函数</p>
<ul>
<li>默认构造函数（空实现）</li>
<li>默认析构函数（空实现）</li>
<li>默认拷贝构造函数，对属性进行值拷贝（值拷贝）等号=进行赋值操作<br>调用规则：</li>
<li>如果用户定义有参构造函数，c++不在提供默认无参构造，但是提供默认拷贝构造</li>
<li>如果用户定义拷贝构造函数，c++不会再提供其他构造函数。</li>
</ul>
<p>49.深拷贝和浅拷贝<br>浅拷贝：简单的赋值拷贝操作<br>深拷贝：在堆区重新申请空间，进行拷贝操作</p>
<p>析构函数作用：将堆区开辟的数据做释放操作，<br>利用编译器提供的拷贝构造函数会做浅拷贝操作，浅拷贝带来的问题是：堆区的内存重复释放。这个问题需要深拷贝来解决。<br>如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题。</p>
<p>50.初始化列表<br>语法：构造函数():属性1(值1),属性2(值2)…{}<br>Person(int a,int b, int c) :m_A(a), m_B(b), m_C(c){}</p>
<p>51.当其他类对象作为类成员，构造时候先构造类对象，再构造自身。析构的顺序与构造相反</p>
<p>52.静态成员函数 static void func(){}，也可以放在private下，设置访问权限</p>
<ul>
<li>所有对象共享同一个函数</li>
<li>静态成员函数只能访问静态成员变量<br>静态成员函数不能访问非静态的变量，因为每个对象都有一个对应变量，静态成员函数无法区分哪个对象对应的变量<br>访问方式，通过创建对象来访问或者直接通过类名::函数名来访问</li>
</ul>
<p>53.成员变量和成员函数分开存储，结论：只有非静态成员变量才属于类的对象上。 静态成员函数，静态成员对象，非静态成员函数都不属于。<br>c++编译器会给每个空对象也分配一个字节空间，是为了区分空对象占内存的位置。<br>每个空对象也应该有一个独一无二的内存地址。<br>静态成员变量需要初始化一个值。</p>
<p>54.this指针指向被调用的成员函数所属的对象。 大环境，每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象共用一块代码。<br>this指针是隐含在每一个非静态成员函数内的一个指针，不需要定义，直接使用。<br>用途：</p>
<ul>
<li><strong>解决名称冲突</strong>：当形参和成员变量同名时，可用this指针来区分。</li>
<li>*<em>返回对象本身用</em>this**：在类的非静态成员函数中返回对象本身，可使用return *this<br>链式编程思想。<br>this指针的本质是指针常量，指针的指向是不可以修改的。</li>
</ul>
<p>55.空指针访问成员函数<br>提高代码健壮性：if(this == NULL){return;}</p>
<p>56.const修饰成员函数后这个函数成为<strong>常函数</strong>   const Person * const this;    void showPerson() const {} 这个const相当于第一个式子的第一个const，修饰this指针，让指针指向的值也不可以修改。<br>加关键字 mutable 后，参数就可以修改。<br>常对象只能调用常函数，常对象不能调用普通成员函数，因为普通成员函数可以修改属性。</p>
<p>57.友元的关键字 friend。 声明特殊的函数和特殊的类，让另外的一些函数或者类进行访问。<br>友元的三种实现方式：</p>
<ul>
<li>全局函数做友元</li>
<li>类做友元</li>
<li>成员函数做友元</li>
<li>*全局函数做友元**：把全局函数放在类中声明，并加上friend 关键字。函数就可以访问私有成员了。</li>
<li>*类做友元**：friend class goodgay；</li>
<li>*成员函数做友元**：friend void visit；</li>
</ul>
<p>58.运算符重载<br><strong>加号运算符重载</strong>：可以通过成员函数或者全局函数重载。 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;成员函数</span><br><span class="line">Person operator+(Person &amp;p)</span><br><span class="line">&#123;</span><br><span class="line">	Person temp;</span><br><span class="line">	temp.m_A &#x3D; this-&gt;m_A + p.m_A;</span><br><span class="line">	temp.m_B &#x3D; this-&gt;m_B + p.m_B;</span><br><span class="line">	return temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;全局函数</span><br><span class="line">Person operator+(Person &amp;p1,Person &amp;p2)</span><br><span class="line">&#123;</span><br><span class="line">	Person temp;</span><br><span class="line">	temp.m_A &#x3D; p1.m_A + p2.m_A;</span><br><span class="line">	temp.m_B &#x3D; p1.m_B + p2.m_B;</span><br><span class="line">	return temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>成员函数调用为：Person p3 = p1.operator+(p2);简化为：Person p3 = p1 + p2;<br>全局函数调用为：Person p3 = p1.operator+(p1,p2);简化为：Person p3 = p1 + p2;<br>运算符重载也可以发生函数重载。Person operator+(Person &amp;p1,Person &amp;p2)重载为Person operator+(Person &amp;p1,int)</p>
<p><strong>左移运算符重载</strong>:输出自定义类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;成员函数</span><br><span class="line">p.operator&lt;&lt;(cout) 简化版本为 p &lt;&lt; cout; 不符合要求</span><br><span class="line">不会利用成员函数重载&lt;&lt;运算符，因为无法实现cout在左侧。</span><br><span class="line">&#x2F;&#x2F;只能利用全局函数来重载左移运算符</span><br><span class="line">ostream operator&lt;&lt;(ostream &amp;cout,Person &amp;p)</span><br><span class="line">&#123;</span><br><span class="line">	cout &lt;&lt;&quot;m_A &#x3D; &quot; &lt;&lt; p.m_A &lt;&lt; &quot;m_B &#x3D; &quot; &lt;&lt; p.m_B;</span><br><span class="line">	return cout;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>递增运算符重载</strong>： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;前置递增  返回引用类型可以一直对一个m_Num做处理</span><br><span class="line">MyInteger&amp; operator++()</span><br><span class="line">&#123;</span><br><span class="line">	m_Num++;</span><br><span class="line">	return *this;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;后置递增 返回值类型  int代表占位参数，用于区分前置和后置递增</span><br><span class="line">MyInteger operator++(int)</span><br><span class="line">&#123;</span><br><span class="line">	MyInteger temp &#x3D; *this;</span><br><span class="line">	m_Num++;</span><br><span class="line">	return temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>赋值运算符重载</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Person&amp; operator&#x3D;(Person &amp;p)</span><br><span class="line">&#123;</span><br><span class="line">	if(m_Age !&#x3D; NULL)</span><br><span class="line">	&#123;</span><br><span class="line">		delete m_Age;</span><br><span class="line">		m_Age &#x3D; NULL;	</span><br><span class="line">	&#125;</span><br><span class="line">	m_Age &#x3D; new int(*p.m_Age);</span><br><span class="line">	return *this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>关系运算符重载</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bool operator&#x3D;&#x3D;(Person &amp;p)</span><br><span class="line">&#123;</span><br><span class="line">	if(this-&gt;m_Name &#x3D;&#x3D; p.m_Name &amp;&amp; this-&gt;m_Age &#x3D;&#x3D; p.m_Age)</span><br><span class="line">	&#123;</span><br><span class="line">		return true;</span><br><span class="line">	&#125;</span><br><span class="line">	return false;</span><br><span class="line">&#125;</span><br><span class="line">bool operator!&#x3D;(Person &amp;p)</span><br><span class="line">&#123;</span><br><span class="line">	if(this-&gt;m_Name &#x3D;&#x3D; p.m_Name &amp;&amp; this-&gt;m_Age &#x3D;&#x3D; p.m_Age)</span><br><span class="line">	&#123;</span><br><span class="line">		return false;</span><br><span class="line">	&#125;</span><br><span class="line">	return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>函数调用运算符重载</strong>：又叫<strong>仿函数</strong>，符号为<code>()</code>,没有固定写法，非常灵活。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void operator()(string test, , , )</span><br><span class="line">&#123;</span><br><span class="line">	&#x2F;&#x2F;内容灵活</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>cout &lt;&lt; MyAdd()(100,100) &lt;&lt; endl; //匿名函数对象，执行完释放，标志为 <code>函数名()</code>.</p>
<p>59.继承 减少重复代码<br>语法：class 子类 ： 继承方式 父类<br>子类 也称为 派生类<br>父类 也称为 基类</p>
<p>60.继承方式</p>
<ul>
<li>公共继承  public和protected继承，private不可被继承</li>
<li>保护继承  public变为protected继承，private不可被继承</li>
<li>私有继承  public和protected变为private私有继承，private不可被继承<br>基类的private都不可被继承</li>
</ul>
<p>61.继承中的对象模型<br>父类中的所有非静态成员属性都会被子类继承下去<br>父类中私有成员被编译器隐藏了，因此访问不到，但确实被继承下去了。<br>开发人员命令提示符<br>定位到CPP文件的盘符 ，然后输入： cl /d1 reportSingleClassLayout参看的类名 所属文件名</p>
<p>62.继承中构造和析构顺序<br>先构造父类，再构造子类，析构顺序与构造顺序相反。</p>
<p>63.父类和子类中同名成员处理方式：<br>访问子类成员属性：直接访问<br>访问父类成员属性：需要加作用域s.Base::Num;<br>访问子类成员函数：直接调用<br>访问父类成员函数：需要加作用域s.Base::func();<br>如果子类中出现和父类同名的成员函数，子类的同名成员会隐藏掉父类中的所有同名成员函数。如果想访问需要加作用域.</p>
<p>64.继承同名静态成员处理方式<br>访问子类同名成员 直接访问即可<br>访问父类同名成员 需要加作用域<br><code>Son::Base::Num</code> 第一个::代表通过类名方式访问，第二个::代表访问父类作用域下的Num</p>
]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>QT学习</title>
    <url>/2020/11/12/QT%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>已看完一部教学视频，待总结。</p>
<a id="more"></a>


<p>安装 MS  自带编译器，部分编码与visual stdio不一样</p>
<p>基类： QWidget（父类） QMainWindow、QDialog（子类）派生</p>
<p>QMainWindow 多菜单栏 工具 状态栏<br>QDialog 对话框</p>
<p>.pro - project文件<br>.cpp -</p>
<p>窗口.cpp 和 .c</p>
<p> QApplication a 有且只有一个<br> myWidget w；实例化窗口对象<br>w.show() 调用show函数显示窗口<br>return a.exec() 消息循环机制，代码阻塞</p>
<p>QT       += core gui  //Qt包含模块</p>
<p>greaterThan(QT_MAJOR_VERSION, 4): QT += widgets //大于4版本以上  widgets</p>
<p>TARGET = 01_FirstProject    //目标 生成.exe文件 文件名称<br>TEMPLATE = app              //模板 应用程序模板</p>
<p>SOURCES += <br>        main.cpp \      //源码<br>        mywidge.cpp</p>
<p>HEADERS += <br>        mywidge.h         //头文件</p>
<pre><code>QPushButton * btn2 = new QPushButton ;
btn2-&gt;setText(&quot;关闭&quot;);
btn2-&gt;move(100,0);
btn2-&gt;resize(50,50);
btn2-&gt;setParent(this);

connect(btn2, &amp;QPushButton::clicked,this,&amp;Widget::close);</code></pre>
<p>信号槽的优点，松散耦合，信号发送端和接收端 本身是没有关联的，通过一个connect连接，将两端 耦合在一起<br>参数1 信号的发送者 参数2 发送的信号（函数的地址） 参数3 信号的接受者 参数4 处理的槽函数（函数的地址）<br>connect( myBtn, &amp;QPushButton::clicked, this, &amp;QWidget::close );</p>
<p>信号可以连接信号</p>
<p>一个信号可以连接多个槽函数<br>多个信号可以连接同一个槽函数<br>信号和槽函数的参数类型必须一一对应<br>信号和槽的参数个数可以不一致  信号的个数可以多于槽个数</p>
<p>QDialog</p>
<p>事件过滤器</p>
<p>1，给控件安装事件过滤器<br>2. 重写事件</p>
]]></content>
  </entry>
  <entry>
    <title>学习方法改进</title>
    <url>/2020/11/11/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E6%94%B9%E8%BF%9B/</url>
    <content><![CDATA[<p>学习方法</p>
<a id="more"></a>

<p>之前觉得看书效率还不错，在连啃几本厚书后（600+页），发现吸收较差。<br>同时，在B站和MOOC上发现很多不错的教程，计划学习方法转为看教学视频，记blog，找实例或者项目做的形式。</p>
<h1 id="B站"><a href="#B站" class="headerlink" title="B站"></a>B站</h1><p>B站上的IT视频比较丰富，观看人数也很多，弹幕也有解答。<br>之前曾在B站看过stm32视频，之前不常在B站看教学视频因为校园网流量太少。现在多了一些，4G流量也很多，计划多看一些。<br>复习 ：<br>C++<br>数据结构与算法<br>计算机系统<br>计算机网络<br>计算机接口与组成<br>Linux</p>
<p>学习：<br>QT<br>Opencv<br>深度学习<br>Java</p>
<h1 id="MOOC"><a href="#MOOC" class="headerlink" title="MOOC"></a>MOOC</h1><p>数字图像处理 第四周-第六讲 灰度的形态学</p>
<p>慕课上有一些专业的课还是很不错。<br>之前看了一个医学图像处理的课，还有ROS系统的课。</p>
]]></content>
      <tags>
        <tag>学习方法</tag>
      </tags>
  </entry>
  <entry>
    <title>visual studio学习</title>
    <url>/2020/11/10/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>visual studio</p>
<a id="more"></a>

<p>一个vs窗口只能打开一个解决方案，一个解决方案可以包括多个工程项目。</p>
]]></content>
  </entry>
  <entry>
    <title>English words</title>
    <url>/2020/11/10/English-words-in-IT/</url>
    <content><![CDATA[<p>English words</p>
<a id="more"></a>



<p>backwards compatibility 向后兼容</p>
<p>toolkit 工具箱</p>
<p>dashboard 仪表盘</p>
<p>binaries 二进制</p>
<p>cross-platform 跨平台</p>
<p>inheritance and collaboration  继承和协作</p>
<p>capture dependencies 获取依赖项</p>
<p>invoke  调用   invocation</p>
<p>extract 提取</p>
<p>executables 可执行文件</p>
<p>customize 定制</p>
<p>Rendering Engine  绘制/渲染引擎</p>
<p>dialog 对话</p>
<p>cache  缓存</p>
<p>scroll down 向下滚动</p>
<p>toggle 切换/开关</p>
<p>makefile 生成文件</p>
<p>prompt 提示</p>
<p>batch script 批处理脚本</p>
<p>shortcut 快捷方式</p>
<p>drag-and-drop 拖放</p>
<p>modify the properties of the shortcut  修改属性</p>
<p>System Architecture 系统架构</p>
<p>manipulate 操纵</p>
<p>remainder 剩余的</p>
<p>raw 原始的</p>
<p>annotation 标注</p>
<p>opacity 透明度 ambient, diffuse, and specular coefficient 环境系数、漫射系数和镜面系数</p>
<p>clip  剪裁</p>
<p>focal  焦点的 stereo, anti-aliasing, motion blur 立体，抗锯齿，运动模糊</p>
<p>derivative 派生的</p>
<p>spheres and cylinders  球体和圆柱体</p>
<p>dataset 数据集</p>
]]></content>
      <tags>
        <tag>English</tag>
      </tags>
  </entry>
  <entry>
    <title>git使用方法学习</title>
    <url>/2020/11/09/git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>计划使用github托管一部分代码</p>
<a id="more"></a>

<p>之前学过git使用，了解过一部分git指令（现在忘光了）。<br>先占一个位置，学一点再更新。</p>
]]></content>
  </entry>
  <entry>
    <title>hexo next主题持续优化</title>
    <url>/2020/11/09/hexo-next%E4%B8%BB%E9%A2%98%E6%8C%81%E7%BB%AD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>已做的优化，发现的bug统计，计划修改的样式记录。</p>
<a id="more"></a>

<h1 id="已做优化"><a href="#已做优化" class="headerlink" title="已做优化"></a>已做优化</h1><p>待更新</p>
<h1 id="发现问题："><a href="#发现问题：" class="headerlink" title="发现问题："></a>发现问题：</h1><p>首行需要空两格。</p>
<p>进度条 需要换 颜色，蓝色让人觉得没有加载完。</p>
<p>发现问题：置顶功能有bug，取消置顶top后首页依然存在标签。</p>
<p>每个blog中间留白太多</p>
<h1 id="添加功能"><a href="#添加功能" class="headerlink" title="添加功能"></a>添加功能</h1><p>需要添加搜索栏功能，之前取消是因为代码上传github后出现加载现象，功能没有实现。</p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>研究方向变更</title>
    <url>/2020/11/09/%E7%A0%94%E7%A9%B6%E6%96%B9%E5%90%91%E5%8F%98%E6%9B%B4/</url>
    <content><![CDATA[<p>研究内容从机器人硬件改为医学图像处理</p>
<a id="more"></a>

<p>原先做了一点 机械结构设计，stm32控制。<br>现在在学医学图像处理的知识，预计这周五（11/13）做一次汇报。</p>
<p>查了一晚上资料，医学图像处理，在技术上更接近数字图像处理，在学术前沿更多使用深度学习。</p>
<p>医学图像处理使用VTK等软件，具体内容待学习。</p>
]]></content>
  </entry>
  <entry>
    <title>Linux指令（备忘录）</title>
    <url>/2020/11/09/Linux%E6%8C%87%E4%BB%A4%EF%BC%88%E5%A4%87%E5%BF%98%E5%BD%95%EF%BC%89/</url>
    <content><![CDATA[<p>Linux指令</p>
<a id="more"></a>


<p>grep 命令</p>
<p>Linux grep 命令用于查找文件里符合条件的字符串。<br>grep 指令用于查找内容包含指定的范本样式的文件，如果发现某文件的内容符合所指定的范本样式，预设 grep 指令会把含有范本样式的那一列显示出来。若不指定任何文件名称，或是所给予的文件名为 <code>-</code>，则 grep 指令会从标准输入设备读取数据。</p>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep [-abcEFGhHilLnqrsvVwxy][-A&lt;显示列数&gt;][-B&lt;显示列数&gt;][-C&lt;显示列数&gt;][-d&lt;进行动作&gt;][-e&lt;范本样式&gt;][-f&lt;范本文件&gt;][--help][范本样式][文件或目录...]</span><br></pre></td></tr></table></figure>


<p>cat 命令<br>cat（英文全拼：concatenate）命令用于连接文件并打印到标准输出设备上。</p>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat [-AbeEnstTuv] [--help] [--version] fileName</span><br></pre></td></tr></table></figure>

<p>pwd 命令 当前目录<br>cd 命令<br><code>cd /</code> 根目录<br><code>cd ..</code> 或者 <code>cd .. //</code>  往回跳一层<br><code>cd ../..</code>  往回跳两层<br><code>cd</code> 和 <code>cd ~</code> 都可进入当前用户主目录，即 <code>/root</code> 目录</p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown语法</title>
    <url>/2020/11/06/hexo-markdown-%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>Markdown 是一种轻量级标记语言，文本后缀为 .md, .markdown，广泛用来撰写帮助文档或用于论坛上发表消息。</p>
<a id="more"></a>

<!-- 注释 -->
<hr>
<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><p>使用 # 号可表示 1-6 级标题<br>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题</span><br><span class="line">##### 这是五级标题</span><br><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><hr>
<h1 id="段落格式"><a href="#段落格式" class="headerlink" title="段落格式"></a>段落格式</h1><h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><p><code>&amp;emsp;</code>和<code>&amp;nbsp;</code>，注意加<code>;</code><strong>分号</strong>。<br>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">空格：&amp;emsp;空格</span><br><span class="line">&amp;nbsp;</span><br><span class="line">空格</span><br></pre></td></tr></table></figure>
<p>效果：<br>空格：&emsp;空格<br>&nbsp;<br>空格 </p>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><table>
<thead>
<tr>
<th>字体</th>
<th>语法</th>
</tr>
</thead>
<tbody><tr>
<td>斜体</td>
<td>左右分别加一个<code>*</code>或<code>_</code>号</td>
</tr>
<tr>
<td>加粗</td>
<td>左右分别加两个<code>*</code>号</td>
</tr>
<tr>
<td>斜体加粗</td>
<td>左右分别加三个<code>*</code>号</td>
</tr>
<tr>
<td>删除线</td>
<td>左右分别加两个<code>~~</code>号</td>
</tr>
<tr>
<td>下划线</td>
<td>通过HTML 的<code>&lt;u&gt;</code> 标签</td>
</tr>
</tbody></table>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*斜体文本*        _斜体文本_</span><br><span class="line">**粗体文本**      __粗体文本__</span><br><span class="line">***粗斜体文本***  ___粗斜体文本___</span><br><span class="line">~~加删除线文本~~</span><br><span class="line">&lt;u&gt;带下划线文本&lt;&#x2F;u&gt;</span><br></pre></td></tr></table></figure>
<p>效果：<br><em>斜体文本</em>        <em>斜体文本</em><br><strong>粗体文本</strong>      <strong>粗体文本</strong><br><strong><em>粗斜体文本</em></strong>  <strong><em>粗斜体文本</em></strong><br><del>加删除线文本</del><br><u>带下划线文本</u></p>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西，星号或是减号中间可以插入空格。<br>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">* * *</span><br><span class="line">_   _   _</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<hr>
<hr>
<hr>
<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>无序列表使用星号<code>*</code>、加号<code>+</code>或是减号<code>-</code>作为列表标记，标记后面要添加一个<strong>空格</strong>。<br>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">+ 第二项</span><br><span class="line">- 第三项</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<ul>
<li>第一项</li>
</ul>
<ul>
<li>第二项</li>
</ul>
<ul>
<li>第三项</li>
</ul>
<h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>数字并加上<code>.</code>号来表示。<br>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">2. 第二项</span><br><span class="line">3. 第三项</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<ol>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ol>
<h2 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h2><p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 第一项：</span><br><span class="line">    - 第一篇博客</span><br><span class="line">    - 第二篇博客</span><br><span class="line">2. 第二项：</span><br><span class="line">    - 第三篇博客</span><br><span class="line">    - 第四篇博客</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<ol>
<li>第一项：<ul>
<li>第一篇博客</li>
<li>第二篇博客</li>
</ul>
</li>
<li>第二项：<ul>
<li>第三篇博客</li>
<li>第四篇博客</li>
</ul>
</li>
</ol>
<hr>
<h1 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h1><p>区块引用是在段落开头使用<code>&gt;</code>符号 ，然后后面紧跟一个<strong>空格</strong>符号：<br>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 区块引用</span><br><span class="line">&gt; MXW&#39;s Blog</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<blockquote>
<p>区块引用<br>MXW’s Blog</p>
</blockquote>
<h2 id="区块嵌套"><a href="#区块嵌套" class="headerlink" title="区块嵌套"></a>区块嵌套</h2><p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 最外层</span><br><span class="line">&gt; &gt; 第一层嵌套</span><br><span class="line">&gt; &gt; &gt; &gt; &gt; 第四层嵌套</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<blockquote>
<p>最外层</p>
<blockquote>
<p>第一层嵌套</p>
<blockquote>
<blockquote>
<blockquote>
<p>第四层嵌套</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h2 id="列表-区块"><a href="#列表-区块" class="headerlink" title="列表+区块"></a>列表+区块</h2><p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 区块1</span><br><span class="line">&gt; + 列表2</span><br><span class="line"></span><br><span class="line">+ 列表1</span><br><span class="line">+ &gt; 区块2</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<blockquote>
<p>区块1</p>
<ul>
<li>列表2</li>
</ul>
</blockquote>
<ul>
<li>列表1</li>
<li><blockquote>
<p>区块2</p>
</blockquote>
</li>
</ul>
<hr>
<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>表格使用 <code>|</code> 来分隔不同的单元格，使用 <code>-</code> 来分隔表头和其他行,表格前后需要<strong>空一行</strong>。<br>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>效果：</p>
<table>
<thead>
<tr>
<th>表头</th>
<th>表头</th>
</tr>
</thead>
<tbody><tr>
<td>单元格</td>
<td>单元格</td>
</tr>
<tr>
<td>单元格</td>
<td>单元格</td>
</tr>
</tbody></table>
<p><strong>对齐方式：</strong><br>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>效果：</p>
<table>
<thead>
<tr>
<th align="left">左对齐</th>
<th align="right">右对齐</th>
<th align="center">居中对齐</th>
</tr>
</thead>
<tbody><tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
<tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
</tbody></table>
<hr>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>段落中的代码或者函数可以用（`）包起来。<br>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;printf()&#96; 函数</span><br></pre></td></tr></table></figure>
<p>效果：<br><code>printf()</code> 函数</p>
<h2 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h2><p>代码区块使用```包裹一段代码，并指定一种语言（也可以不指定）。</p>
<hr>
<h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h1><p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[超链接名](超链接地址 &quot;超链接title&quot;)</span><br><span class="line">不加title:[超链接名](超链接地址)</span><br><span class="line">直接使用链接地址&lt;超链接地址&gt;</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[MXW01&#39;s Blog](http:&#x2F;&#x2F;MXW01.github.io)</span><br><span class="line">[Baidu](http:&#x2F;&#x2F;baidu.com)</span><br><span class="line">直接使用链接地址&lt;http:&#x2F;&#x2F;mxw01.github.io&gt;</span><br></pre></td></tr></table></figure>
<p>效果：<br><a href="http://mxw01.github.io/">MXW01’s Blog</a><br><a href="http://baidu.com/">Baidu</a><br>直接使用链接地址<a href="http://mxw01.github.io/">http://mxw01.github.io</a></p>
<hr>
<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>！+[图片替代文字]+(图片地址”title”)<br>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![天使](https:&#x2F;&#x2F;ss1.bdstatic.com&#x2F;70cFvXSh_Q1YnxGkpoWK1HF6hhy&#x2F;it&#x2F;u&#x3D;3065461735,3257830606&amp;fm&#x3D;26&amp;gp&#x3D;0.jpg &quot;angel&quot;)</span><br></pre></td></tr></table></figure>
<p>效果：<br><img src="https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=3065461735,3257830606&fm=26&gp=0.jpg" alt="天使" title="angel"></p>
<h2 id="改变图片大小"><a href="#改变图片大小" class="headerlink" title="改变图片大小"></a>改变图片大小</h2><p>使用<code>&lt;img&gt;</code>标签。<br>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;ss1.bdstatic.com&#x2F;70cFvXSh_Q1YnxGkpoWK1HF6hhy&#x2F;it&#x2F;u&#x3D;3065461735,3257830606&amp;fm&#x3D;26&amp;gp&#x3D;0.jpg&quot; width&#x3D;&quot;30%&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>效果：<br><img src="https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=3065461735,3257830606&fm=26&gp=0.jpg" width="30%"></p>
<hr>
<h1 id="hexo标签插件"><a href="#hexo标签插件" class="headerlink" title="hexo标签插件"></a>hexo标签插件</h1><p>hexo标签插件（Tag Plugins）可以修改引用块，代码块，图片，链接，视频等等。</p>
<h2 id="引用块加颜色"><a href="#引用块加颜色" class="headerlink" title="引用块加颜色"></a>引用块加颜色</h2><p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% note [class_name] %&#125;  content  &#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>[class_name]可以替换为<code>default</code>，<code>primary</code>，<code>success</code>，<code>info</code>，<code>warning</code>，<code>danger</code></li>
<li>content写你需要写的内容</li>
</ul>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% note default %&#125;  default  &#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary %&#125;  primary  &#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success %&#125;  success  &#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info %&#125;  info  &#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning %&#125;  warning  &#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger %&#125;  danger  &#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<p>效果：</p>
<div class="note default">
            <p>default  </p>
          </div>

<div class="note primary">
            <p>primary  </p>
          </div>

<div class="note success">
            <p>success  </p>
          </div>

<div class="note info">
            <p>info  </p>
          </div>

<div class="note warning">
            <p>warning  </p>
          </div>

<div class="note danger">
            <p>danger  </p>
          </div>
<hr>
<h1 id="其它技巧"><a href="#其它技巧" class="headerlink" title="其它技巧"></a>其它技巧</h1><p><strong>转义</strong><br>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**文本加粗**</span><br><span class="line">\*\*显示星星\*\*</span><br></pre></td></tr></table></figure>
<p>效果：<br><strong>文本加粗</strong><br>**显示星星**</p>
<p><strong>支持的 HTML 元素</strong></p>
<h1 id="本文参考"><a href="#本文参考" class="headerlink" title="本文参考"></a>本文参考</h1><p>菜鸟教程——<a href="https://www.runoob.com/markdown/md-tutorial.html">Markdown教程</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>语法</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/11/05/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<a id="more"></a>  


<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>


<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>



<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>


<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<h2 id="Second"><a href="#Second" class="headerlink" title="Second"></a>Second</h2>]]></content>
  </entry>
</search>
